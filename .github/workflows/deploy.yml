name: Deploy project to Fortrabbit

on:
  workflow_call:
    inputs:
      remote:
        required: true
        type: string
        description: 'The remote Fortrabbit URL'
      node_version:
        required: false
        type: string
        default: ""
        description: 'The node version to use if assets need to be built'
      php_version:
        required: false
        type: string
        default: ""
        description: 'The PHP version to use if PHP commands are required in the workflow. See shivammathur/setup-php@v2'
      php_tools:
        required: false
        type: string
        default: "composer"
        description: 'The PHP tools to setup. See shivammathur/setup-php@v2'
      php_extensions:
        required: false
        type: string
        default: ""
        description: 'The PHP extensions to use. See shivammathur/setup-php@v2'
      npm_build_cmd:
        required: false
        type: string
        default: "npm run build"
        description: 'The command to run to build assets'
      public_build_path:
        required: false
        type: string
        default: "public/build"
        description: 'The public build path'
      pre_deploy_script:
        required: false
        type: string
        default: ""
        description: 'The path to a script to run prior to deploy'
      fortrabbit_branch:
        required: false
        type: string
        default: main
        description: 'The fortrabbit branch to push to'
      git_email:
        required: false
        type: string
        default: deploy@github.com
        description: 'The git email address to use'
      git_name:
        required: false
        type: string
        default: Github-Fortrabbit Deployer
        description: 'The git user name to use'
    secrets:
      deploy_key:
        required: true
        description: 'A private deploy key to use with the ssh agent'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # SETUP
      - uses: actions/checkout@v4
      - uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.deploy_key }}

      - name: Setup PHP with PECL extension
        uses: shivammathur/setup-php@v2
        if: ${{ inputs.php_version != '' }}
        with:
          php-version: ${{ inputs.php_version }}
          tools: ${{ inputs.php_tools }}
          extensions: ${{ inputs.php_extensions }}

      - name: Run Composer
        if: ${{ inputs.php_version != '' }}
        run: composer install --dev

      # NODE / ASSET BUILD
      - name: Use Node.js 18.x
        uses: actions/setup-node@v3
        if: ${{ inputs.node_version != '' }}
        with:
          node-version: ${{ inputs.node_version }}
      - name: npm install and build
        if: ${{ inputs.node_version != '' }}
        run: |
          npm install
          ${{ inputs.npm_build_cmd }}

      # GIT SETUP
      - name: Configure Git
        run: |
          rm -rf .git
          git init
          git config user.email "${{ inputs.git_email }}"
          git config user.name "${{ inputs.git_name }}"
          git checkout -b deploy

      # GIT ADD
      - name: Round up Project Files
        run: git add --all

      # GIT ADD (ASSETS)
      - name: Round up Build Assets
        if: ${{ inputs.node_version != '' }}
        run: |
          git add -f "${{ inputs.public_build_path }}"

      # PRE-DEPLOY COMMAND
      - name: Run Pre-Deploy Commands
        if: ${{ inputs.pre_deploy_script != '' }}
        run: |
          bash "${{inputs.pre_deploy_script}}"

      # GIT COMMIT
      - name: Commit Everything for Deploy
        run: |
          git commit -m "Build $($CURRENT_DATE_TIME)"
        env:
          CURRENT_DATE_TIME: "date +%Y-%m-%d:%H-%M"

      # PUSH TO DEPLOY
      - name: Deploy to Fortrabbit
        run: |
          git push --force "${{ inputs.remote }}" "deploy:${{ inputs.fortrabbit_branch }}"
        env:
          # This avoids a failure when the client does not know the SSH Host already
          GIT_SSH_COMMAND: "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no"
